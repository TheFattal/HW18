-- a: Create Tables and Relationships
CREATE TABLE Categories (
    id_category INTEGER PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE Products (
    id_product INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    id_category INTEGER,
    FOREIGN KEY (id_category) REFERENCES Categories(id_category)
);

CREATE TABLE NutritionalValues (
    id_nutrition INTEGER PRIMARY KEY,
    id_product INTEGER,
    name TEXT NOT NULL,
    calories REAL,
    fats REAL,
    sugar REAL,
    FOREIGN KEY (id_product) REFERENCES Products(id_product)
);

CREATE TABLE Orders (
    id_order INTEGER PRIMARY KEY,
    time_date DATETIME NOT NULL,
    address TEXT NOT NULL,
    name_customer TEXT NOT NULL,
    ph_customer TEXT,
    price_total REAL
);

CREATE TABLE OrdersProducts (
    id_order INTEGER,
    id_product INTEGER,
    amount INTEGER NOT NULL,
    PRIMARY KEY (id_order, id_product),
    FOREIGN KEY (id_order) REFERENCES Orders(id_order),
    FOREIGN KEY (id_product) REFERENCES Products(id_product)
);

-- b: Relationships
-- Categories to Products: One-to-Many
-- Products to Nutritional Values: One-to-Many
-- Orders to OrdersProducts: One-to-Many
-- Products to OrdersProducts: One-to-Many

-- c: Populate the Tables
INSERT OR IGNORE INTO Categories (name) VALUES 
('Beverages'), ('Snacks'), ('Dairy'), ('Fruits'), ('Vegetables');

INSERT INTO Products (name, price, id_category) VALUES 
('Coke', 1.50, 1), ('Chips', 2.00, 2), ('Milk', 1.20, 3);

INSERT INTO NutritionalValues (id_product, name, calories, fats, sugar) VALUES
(1, 'Coke', 150, 0, 39), (2, 'Chips', 300, 20, 1), (3, 'Milk', 100, 5, 12);

INSERT INTO Orders (time_date, address, name_customer, ph_customer, price_total) VALUES
(CURRENT_TIMESTAMP, '123 Main St', 'Alice', '555-1234', 0),
(CURRENT_TIMESTAMP, '456 Elm St', 'Bob', '555-5678', 0);

INSERT INTO OrdersProducts (id_order, id_product, amount) VALUES
(1, 1, 2), (1, 2, 1), (2, 3, 3);

-- d.i: Show all items and their nutritional value + category
SELECT p.name AS product_name, p.price, c.name AS category_name, 
       n.name AS nutrition_name, n.calories, n.fats, n.sugar
FROM Products p
JOIN Categories c ON p.id_category = c.id_category
LEFT JOIN NutritionalValues n ON p.id_product = n.id_product;

-- d.ii: View all orders with product details
SELECT o.id_order, o.time_date, o.address, o.name_customer, o.ph_customer, 
       op.amount, p.name AS product_name, p.price
FROM Orders o
JOIN OrdersProducts op ON o.id_order = op.id_order
JOIN Products p ON op.id_product = p.id_product;

-- d.iii: Add another product to each order
INSERT INTO OrdersProducts (id_order, id_product, amount) VALUES
(1, 3, 1), (2, 1, 2);

-- d.iv: Update the cost of all orders
UPDATE Orders
SET price_total = (SELECT SUM(op.amount * p.price)
                   FROM OrdersProducts op
                   JOIN Products p ON op.id_product = p.id_product
                   WHERE op.id_order = Orders.id_order);

-- d.v: Most expensive, cheapest, average orders
SELECT MAX(price_total) AS most_expensive_order FROM Orders;
SELECT MIN(price_total) AS cheapest_order FROM Orders;
SELECT AVG(price_total) AS average_order_price FROM Orders;

-- d.vi: Customer who ordered the most times
SELECT name_customer, COUNT(*) AS order_count
FROM Orders
GROUP BY name_customer
ORDER BY order_count DESC
LIMIT 1;

-- d.vii: Which product sells the most, least, average?
SELECT p.name AS product_name, SUM(op.amount) AS total_sold
FROM OrdersProducts op
JOIN Products p ON op.id_product = p.id_product
GROUP BY p.id_product
ORDER BY total_sold DESC LIMIT 1;

SELECT p.name AS product_name, SUM(op.amount) AS total_sold
FROM OrdersProducts op
JOIN Products p ON op.id_product = p.id_product
GROUP BY p.id_product
ORDER BY total_sold ASC LIMIT 1;

SELECT AVG(total_sold) AS average_sold
FROM (SELECT SUM(op.amount) AS total_sold FROM OrdersProducts op GROUP BY op.id_product) AS subquery;

-- d.viii: Which category of products sells the most, least?
SELECT c.name AS category_name, SUM(op.amount) AS total_sold
FROM OrdersProducts op
JOIN Products p ON op.id_product = p.id_product
JOIN Categories c ON p.id_category = c.id_category
GROUP BY c.id_category
ORDER BY total_sold DESC LIMIT 1;

SELECT c.name AS category_name, SUM(op.amount) AS total_sold
FROM OrdersProducts op
JOIN Products p ON op.id_product = p.id_product
JOIN Categories c ON p.id_category = c.id_category
GROUP BY c.id_category
ORDER BY total_sold ASC LIMIT 1;

-- d.ix: Product appears in the most different orders
SELECT p.name AS product_name, COUNT(DISTINCT op.id_order) AS order_count
FROM OrdersProducts op
JOIN Products p ON op.id_product = p.id_product
GROUP BY p.id_product
ORDER BY order_count DESC
LIMIT 1;
